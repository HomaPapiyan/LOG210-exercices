@startuml DCU
package SystèmeBibliotheque{
(CU01-Reserver un livre) as (CU01)  
}
Membre->(CU01)
@enduml

@startuml MDD
class M as "Membre" <<Role>>{
  nom: string
}

class B as "Bibliotheque" <<Conteneur>>
class L as "Livre" << Description d'entité>>   {
  titre: String
  <s>auteur: String</s>
  isbn: String
  <s>maisonEdition: String</s>
  noEdition: String
  annee: integer
} 
class ME as "MaisonEdition" <<Description d'entité>>
class A as "Auteur" <<Role>>
class EL as "ExemplaireLivre" <<Objet physique, contenue de Bibiliotheque, Produit ou service lié a un transaction>>{
  code: string
}
class R  as "Reservation" <<Transaction>> {
  noReservation:String
}

B --"*" L: permet la recherche
M --"*" R: fait
R -- EL: est pour
EL "*" -- L: sont décrit 
L -- A: est écrit par 
L -- ME: est éditer par une
B -- "*" M: offre des service à 
@enduml


@startuml DSS
title: Réserver un livre à la bibliothèque
skinparam style strictuml
Actor ":Membre" as M
participant ":System" as S
M -> S: demarrerRechercheLivre()
M <<-- S: formulaire de recherche

M -> S: rechercherLivre(texte:string)
M <<-- S: [livre]

M -> S: selectionnerLivre(livre:string)
note left of S: livre => titre auteur, isbn, maison edition, no édition, année
M <<-- S: livre,[exemplaire]

M -> S: reserverExemplaire(livre:string, code:string)
M <<-- S: noReservation, nom du membre, code de l'exemplaire


@enduml

@startuml RDCU-demarrerRechercheLivre
skinparam style strictuml
participant ":ControleurReservation" as S
note left of S: Controlleur de session, \nfavorise une forte cohesion

 -> S: demarrerRechercheLivre() 

@enduml

@startuml RDCU-rechercherLivre
title: rechercherLivre
skinparam style strictuml
participant ":ControleurReservation" as S
note left of S: Controlleur de session
participant ":Bibliotheque" as B
participant "ll:List<:Livre>" as LL

 -> S: livres:string = rechercherLivre(texte:string)
note left of B: Expert en information,\ncontroleur possède la Bibliotheque,\nBibliotheque possède la liste de livre
S -> B: [livre] =rechercherLivre(texte:string)
note left of LL: List<:Livre> est l'expert pour trouver les livres en sachant un texte
B -> LL: [livre] = find(texte:string)

@enduml


@startuml RDCU-selectionnerLivre
skinparam style strictuml
participant ":ControleurReservation" as S
note left of S: Controlleur de session
participant ":Bibliotheque" as B
participant "ml:Map<nom, :Livre>" as ML
participant "l:Livre" as L

 -> S: livreEtExemplaires:string = selectionnerLivre(livre:string)
 note left of B: Expert en information \nControleur -> Bibliotheque\nBibliotheque -> map de livre
 S->B: [l,[exemplaire]] = selectionnerLivre(livre:string)
 note left of ML: Expert en information
 B->ML: l = get(nom:string)

 note left of L: Expert Livre décrit plusieurs exemplaire
 B->L: [exemplaire] = getExemplaires()
@enduml

@startuml RDCU-reserverExemplaire
title: Réserver un livre à la bibliothèque
skinparam style strictuml
participant ":ControleurReservation" as S
note left of S: Controlleur de session
participant ":Reservation" as Reservation
participant ":Bibliotheque" as B
participant "ml:Map<isbn, :Livre>" as ML
participant "l:Livre" as L
participant "me:Map<code:string, :Exemplaire>" as ME

 -> S**: noconfirmation:string = reserverExemplaire(isbn:string, code:string)
note right of S: Createur par default, \nfaible couplage avec parametre m:Membre
S->B: exemplaire =  getExemplaire(isbn:string, code:string)
B -> ML: l = get(isbn:string)
note left of L: expert en information\nl possède une map d'exemmplaires
B -> L: exemplaire = getExemplaire(code:string) 
note left of L: expert en information 
L -> ME: exemplaire = get(code)

note left of Reservation: createur par default, PUCE n'est pas application
note left of Reservation: r.noConfirmation est devenu no unique
S -> Reservation**: create(m:Membre, exemplaire:Exemplaire)
Reservation ->Reservation: initNoConfirmation()

note left of Reservation: expert: Ctrl possède un référence à l'objet racine Bibliotheque et \nr est le mutateur d'attribut
S -> Reservation: noConfirmation:string = getNoConfirmation()

@enduml

@startuml DCL
class C as "ControleurReservation"{
  listLivres: List<:Livre>" {
  mapLivres: Map<nom, :Livre>" {
  demarrerRechercheLivre() 
  rechercherLivre(texte:string): list<Livre:json>
  selectionnerLivre(livre:string): string
  reserverExemplaire(code:string)
}
class M as "Membre" <<Role>>{
  nom: string
}

class B as "Bibliotheque" <<Conteneur>>{
  rechercherLivre(texte:string): [:Livre]
  selectionnerLivre(livre:string): [:Livre,[:Exemplaire]]
  getExemplaire(code:string): Exemplaire
}

class L as "Livre" << Description d'entité>>   {
  mapExemplaires: Map<code:string, :Exemplaire>
  titre: String
  <s>auteur: String</s>
  isbn: String
  <s>maisonEdition: String</s>
  noEdition: String
  annee: integer
  [Exemplaire] = getExemplaires()
  exemplaire = getExemplaire(code:string) 
} 
class ME as "MaisonEdition" <<Description d'entité>>
class A as "Auteur" <<Role>>
class EL as "ExemplaireLivre" <<Objet physique, contenue de Bibiliotheque, Produit ou service lié a un transaction>>{
  code: string
}
class R  as "Reservation" <<Transaction>> {
  noReservation:String
  create(m:Membre, exemplaire:Exemplaire)
}

C -->"*\nlistLivres" L
C --> "*\nmapLivres" L
L --> "*" EL
C --> B

B --->"*" L: permet la\nrecherche
M <--"*" R: est fait pour <
R --> EL:  reserve 
L "*"<-- A: sont écrit par <
L "*" <-- ME: edite <
B -- "*" M: offre des service à 
@enduml